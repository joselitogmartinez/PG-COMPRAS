const { Builder, By, until } = require('selenium-webdriver');
const { Select } = require('selenium-webdriver/lib/select');
require('chromedriver');
const chrome = require('selenium-webdriver/chrome');
const { expect } = require('chai');

const BASE = process.env.BASE_URL || 'http://localhost:3000'; // URL base de la aplicaci√≥n
const HEADLESS = process.env.HEADLESS === 'true'; // Ejecutar en modo headless

let driver; // Inicializa el driver de Selenium
const timeout = 30000; // Tiempo de espera para las pruebas
let UNIQUE_REF = null; // Referencia √∫nica para el expediente

// Funci√≥n para encontrar una fila por su texto
async function findRowByText(text) {
  const rows = await driver.findElements(By.css('table tbody tr'));
  for (const row of rows) {
    const t = await row.getText();
    if (t.includes(text)) return row;
  }
  return null;
}

// Flujo simplificado: login compras -> crear expediente completo
describe('Test de creaci√≥n de expediente de compra directa', function() {
  this.timeout(120000);

  before(async () => {
    const options = new chrome.Options();
    if (HEADLESS) options.addArguments('--headless=new', '--disable-gpu');
    options.addArguments('--window-size=1400,900');

    driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();
    
    console.log('üîÑ Iniciando navegador y preparando entorno...');

    // Login con usuario comprase2e
    await driver.get(`${BASE}/`);
    await driver.wait(until.elementLocated(By.css('form')), timeout);
    
    console.log('üîë Realizando login con usuario comprase2e...');
    
    const userInput = await driver.findElement(By.css('input[name="usuario"], input[type="text"], input:first-of-type'));
    await userInput.clear();
    await userInput.sendKeys('comprase2e');
    
    const passInput = await driver.findElement(By.css('input[name="contrase√±a"], input[type="password"]'));
    await passInput.clear();
    await passInput.sendKeys('compras123');
    
    const loginBtn = await driver.findElement(By.css('button[type="submit"], button'));
    await loginBtn.click();
    
    // Esperar redirecci√≥n a m√≥dulo compras
    await driver.wait(async () => {
      const url = await driver.getCurrentUrl();
      return url.includes('/compras');
    }, timeout);
    
    console.log('‚úÖ Login exitoso, accediendo al m√≥dulo de compras...');
  });

  after(async () => {
    if (driver) {
      console.log('üîÑ Cerrando el navegador...');
      await driver.quit();
    }
  });

  it('Crear expediente completo de compra directa', async () => {
    // Generar referencia √∫nica para este test
    UNIQUE_REF = `E2E-${Date.now()}`;
    console.log(`üìù Creando expediente con referencia: ${UNIQUE_REF}`);

    // Abrir formulario de registro
    const registrarBtn = await driver.wait(
      until.elementLocated(By.xpath("//button[contains(., 'REGISTRAR') or contains(., 'Registrar') or @data-testid='open-create']")),
      timeout
    );
    await registrarBtn.click();
    console.log('‚úÖ Formulario de registro abierto');

    // Esperar que aparezca el modal
    await driver.wait(until.elementLocated(By.css('.modal-dialog, form')), timeout);
    await driver.sleep(1000);

    console.log('üìã Completando todos los campos del formulario...');

    // 1. Campo No
    try {
      const noInput = await driver.findElement(By.xpath("//label[text()='No']/following-sibling::input | //label[contains(text(), 'No')]/following-sibling::input | //input[@placeholder='No']"));
      await noInput.clear();
      await noInput.sendKeys(UNIQUE_REF);
      console.log('‚úÖ Campo No completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo No no encontrado, intentando alternativa...');
      // Intentar con el primer input del formulario
      const firstInput = await driver.findElement(By.css('.modal-dialog input:first-of-type'));
      await firstInput.clear();
      await firstInput.sendKeys(UNIQUE_REF);
    }

    // 2. Modalidad (Select)
    try {
      const modalidadSelect = await driver.findElement(By.xpath("//label[text()='Modalidad']/following-sibling::select | //select[contains(@id, 'modalidad')]"));
      await modalidadSelect.click();
      await driver.sleep(500);
      
      // Seleccionar COMPRA DIRECTA
      const optionCompraDirecta = await driver.findElement(By.xpath("//option[contains(text(), 'COMPRA DIRECTA')]"));
      await optionCompraDirecta.click();
      console.log('‚úÖ Modalidad seleccionada: COMPRA DIRECTA');
    } catch (e) {
      console.log('‚ö†Ô∏è No se pudo seleccionar Modalidad:', e.message);
    }

    // 3. NOG
    try {
      const nogInput = await driver.findElement(By.xpath("//label[text()='NOG']/following-sibling::input | //input[@name='nog']"));
      await nogInput.clear();
      await nogInput.sendKeys(`NOG-${UNIQUE_REF}`);
      console.log('‚úÖ Campo NOG completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo NOG no encontrado');
    }

    // 4. Fecha Publicaci√≥n
    try {
      const fechaPubInput = await driver.findElement(By.xpath("//label[contains(text(), 'Fecha Publicaci√≥n')]/following-sibling::input | //input[@name='fecha_publicacion']"));
      await fechaPubInput.clear();
      await fechaPubInput.sendKeys('01/10/2025');
      console.log('‚úÖ Fecha Publicaci√≥n completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Fecha Publicaci√≥n no encontrado');
    }

    // 5. Estatus Evento (Select) - Versi√≥n espec√≠fica para ADJUDICADO
    try {
      console.log('üîÑ Seleccionando Estatus Evento: ADJUDICADO...');
      
      // Buscar el select
      const estatusSelect = await driver.findElement(By.xpath("//label[contains(text(), 'Estatus Evento')]/following-sibling::select"));
      
      // Scroll al elemento
      await driver.executeScript("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", estatusSelect);
      await driver.sleep(1000);
      
      // M√©todo 1: Usar Select class de Selenium
      try {
        const selectElement = new Select(estatusSelect);
        await selectElement.selectByVisibleText('ADJUDICADO');
        console.log('‚úÖ ADJUDICADO seleccionado con Select class');
      } catch (e) {
        console.log('‚ö†Ô∏è Select class fall√≥, usando m√©todo alternativo');
        
        // M√©todo 2: Click y luego click en la opci√≥n
        await estatusSelect.click();
        await driver.sleep(500);
        
        // Buscar espec√≠ficamente la opci√≥n ADJUDICADO
        const adjudicadoOption = await driver.findElement(By.xpath("//option[text()='ADJUDICADO']"));
        await adjudicadoOption.click();
        await driver.sleep(500);
        console.log('‚úÖ ADJUDICADO seleccionado con click directo');
      }
      
      // Verificar que se seleccion√≥ correctamente
      const selectedValue = await estatusSelect.getAttribute('value');
      const selectedText = await driver.executeScript("return arguments[0].options[arguments[0].selectedIndex].text;", estatusSelect);
      
      console.log(`üîç Valor seleccionado: "${selectedValue}"`);
      console.log(`üîç Texto seleccionado: "${selectedText}"`);
      
      if (selectedText === 'ADJUDICADO') {
        console.log('‚úÖ Estatus Evento: ADJUDICADO confirmado');
      } else {
        console.log('‚ö†Ô∏è ADJUDICADO no se seleccion√≥ correctamente, intentando forzar...');
        
        // M√©todo 3: JavaScript forzado
        await driver.executeScript(`
          const select = arguments[0];
          const options = select.options;
          for (let i = 0; i < options.length; i++) {
            if (options[i].text === 'ADJUDICADO') {
              select.selectedIndex = i;
              select.value = options[i].value;
              
              // Disparar eventos
              const changeEvent = new Event('change', { bubbles: true });
              const inputEvent = new Event('input', { bubbles: true });
              select.dispatchEvent(changeEvent);
              select.dispatchEvent(inputEvent);
              
              break;
            }
          }
        `, estatusSelect);
        
        // Verificar nuevamente
        const finalText = await driver.executeScript("return arguments[0].options[arguments[0].selectedIndex].text;", estatusSelect);
        console.log(`üîç Verificaci√≥n final: "${finalText}"`);
      }
      
    } catch (e) {
      console.log('‚ùå Error al seleccionar Estatus Evento:', e.message);
    }

    // 6. Fecha Adjudicaci√≥n
    try {
      const fechaAdjInput = await driver.findElement(By.xpath("//label[contains(text(), 'Fecha Adjudicaci√≥n')]/following-sibling::input | //input[@name='fecha_adjudicacion']"));
      await fechaAdjInput.clear();
      await fechaAdjInput.sendKeys('01/10/2025');
      console.log('‚úÖ Fecha Adjudicaci√≥n completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Fecha Adjudicaci√≥n no encontrado');
    }

    // 7. Descripci√≥n Evento
    try {
      const descEventoInput = await driver.findElement(By.xpath("//label[contains(text(), 'Descripci√≥n Evento')]/following-sibling::input | //textarea[@name='descripcion_evento'] | //input[@name='descripcion_evento']"));
      await descEventoInput.clear();
      await descEventoInput.sendKeys('Descripci√≥n de prueba automatizada');
      console.log('‚úÖ Descripci√≥n Evento completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Descripci√≥n Evento no encontrado');
    }

    // 8. No. Solicitud
    try {
      const solicitudInput = await driver.findElement(By.xpath("//label[contains(text(), 'No. Solicitud')]/following-sibling::input | //input[@name='no_solicitud']"));
      await solicitudInput.clear();
      await solicitudInput.sendKeys(`SOL-${UNIQUE_REF}`);
      console.log('‚úÖ No. Solicitud completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo No. Solicitud no encontrado');
    }

    // 9. No. O.C
    try {
      const ocInput = await driver.findElement(By.xpath("//label[contains(text(), 'No. O.C')]/following-sibling::input | //input[@name='no_oc']"));
      await ocInput.clear();
      await ocInput.sendKeys(`OC-${UNIQUE_REF}`);
      console.log('‚úÖ No. O.C completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo No. O.C no encontrado');
    }

    // 10. Fecha O.C
    try {
      const fechaOcInput = await driver.findElement(By.xpath("//label[contains(text(), 'Fecha O.C')]/following-sibling::input | //input[@name='fecha_oc']"));
      await fechaOcInput.clear();
      await fechaOcInput.sendKeys('01/10/2025');
      console.log('‚úÖ Fecha O.C completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Fecha O.C no encontrado');
    }

    // 11. NIT Proveedor
    try {
      const nitInput = await driver.findElement(By.xpath("//label[contains(text(), 'NIT Proveedor')]/following-sibling::input | //input[@name='nit_proveedor']"));
      await nitInput.clear();
      await nitInput.sendKeys('12345678-9');
      console.log('‚úÖ NIT Proveedor completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo NIT Proveedor no encontrado');
    }

    // 12. Nombre Proveedor
    try {
      const nombreProvInput = await driver.findElement(By.xpath("//label[contains(text(), 'Nombre Proveedor')]/following-sibling::input | //input[@name='nombre_proveedor']"));
      await nombreProvInput.clear();
      await nombreProvInput.sendKeys('Proveedor E2E Test');
      console.log('‚úÖ Nombre Proveedor completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Nombre Proveedor no encontrado');
    }

    // 13. Descripcion del Producto
    try {
      const descProdInput = await driver.findElement(By.xpath("//label[contains(text(), 'Descripcion del Producto')]/following-sibling::input | //textarea[@name='descripcion_producto'] | //input[@name='descripcion_producto']"));
      await descProdInput.clear();
      await descProdInput.sendKeys('Producto de prueba automatizada E2E');
      console.log('‚úÖ Descripci√≥n del Producto completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Descripci√≥n del Producto no encontrado');
    }

    // 14. Rengl√≥n
    try {
      const renglonInput = await driver.findElement(By.xpath("//label[contains(text(), 'Rengl√≥n')]/following-sibling::input | //input[@name='renglon']"));
      await renglonInput.clear();
      await renglonInput.sendKeys('001');
      console.log('‚úÖ Rengl√≥n completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Rengl√≥n no encontrado');
    }
    
    // 15. C√≥digo Insumo (si existe)
    try {
      const codigoInput = await driver.findElement(By.xpath("//label[contains(text(), 'C√≥digo Insumo')]/following-sibling::input | //input[@name='codigo_insumo']"));
      await codigoInput.clear();
      await codigoInput.sendKeys(`COD-${UNIQUE_REF}`);
      console.log('‚úÖ C√≥digo Insumo completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo C√≥digo Insumo no encontrado');
    }

    // 16. Presentaci√≥n/Unidad
    try {
      const presentacionInput = await driver.findElement(By.xpath("//label[contains(text(), 'Presentaci√≥n/Unidad')]/following-sibling::input | //input[@name='presentacion_unidad']"));
      await presentacionInput.clear();
      await presentacionInput.sendKeys('Unidad');
      console.log('‚úÖ Presentaci√≥n/Unidad completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Presentaci√≥n/Unidad no encontrado');
    }

    // 17. Precio Unitario
    try {
      const precioInput = await driver.findElement(By.xpath("//label[contains(text(), 'Precio Unitario')]/following-sibling::input | //input[@name='precio_unitario']"));
      await precioInput.clear();
      await precioInput.sendKeys('100.00');
      console.log('‚úÖ Precio Unitario completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Precio Unitario no encontrado');
    }

    // 18. Cantidad Adjudicada
    try {
      const cantidadInput = await driver.findElement(By.xpath("//label[contains(text(), 'Cantidad Adjudicada')]/following-sibling::input | //input[@name='cantidad_adjudicada']"));
      await cantidadInput.clear();
      await cantidadInput.sendKeys('10');
      console.log('‚úÖ Cantidad Adjudicada completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Cantidad Adjudicada no encontrado');
    }

    // 19. Monto Total (se calcula autom√°ticamente o manual)
    try {
      const montoInput = await driver.findElement(By.xpath("//label[contains(text(), 'Monto Total')]/following-sibling::input | //input[@name='monto_total']"));
      await montoInput.clear();
      await montoInput.sendKeys('1000.00');
      console.log('‚úÖ Monto Total completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Monto Total no encontrado');
    }

    // 20. No. Factura
    try {
      const facturaInput = await driver.findElement(By.xpath("//label[contains(text(), 'No. Factura')]/following-sibling::input | //input[@name='no_factura']"));
      await facturaInput.clear();
      await facturaInput.sendKeys(`FAC-${UNIQUE_REF}`);
      console.log('‚úÖ No. Factura completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo No. Factura no encontrado');
    }

    // 21. Fecha Factura
    try {
      const fechaFacturaInput = await driver.findElement(By.xpath("//label[contains(text(), 'Fecha Factura')]/following-sibling::input | //input[@name='fecha_factura']"));
      await fechaFacturaInput.clear();
      await fechaFacturaInput.sendKeys('01/10/2025');
      console.log('‚úÖ Fecha Factura completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Fecha Factura no encontrado');
    }

    // 22. No. Ingreso Almac√©n
    try {
      const ingresoAlmacenInput = await driver.findElement(By.xpath("//label[contains(text(), 'No. Ingreso Almac√©n')]/following-sibling::input | //input[@name='no_ingreso_almacen']"));
      await ingresoAlmacenInput.clear();
      await ingresoAlmacenInput.sendKeys(`ALM-${UNIQUE_REF}`);
      console.log('‚úÖ No. Ingreso Almac√©n completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo No. Ingreso Almac√©n no encontrado');
    }

    // 23. F/I Almac√©n (Fecha Ingreso Almac√©n)
    try {
      const fechaIngresoAlmacenInput = await driver.findElement(By.xpath("//label[contains(text(), 'F/I Almac√©n')]/following-sibling::input | //input[@name='fecha_ingreso_almacen']"));
      await fechaIngresoAlmacenInput.clear();
      await fechaIngresoAlmacenInput.sendKeys('02/10/2025');
      console.log('‚úÖ F/I Almac√©n completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo F/I Almac√©n no encontrado');
    }

    // 24. No. CUR
    try {
      const curInput = await driver.findElement(By.xpath("//label[contains(text(), 'No. CUR')]/following-sibling::input | //input[@name='no_cur']"));
      await curInput.clear();
      await curInput.sendKeys(`CUR-${UNIQUE_REF}`);
      console.log('‚úÖ No. CUR completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo No. CUR no encontrado');
    }

    // 25. Fecha CUR
    try {
      const fechaCurInput = await driver.findElement(By.xpath("//label[contains(text(), 'Fecha CUR')]/following-sibling::input | //input[@name='fecha_cur']"));
      await fechaCurInput.clear();
      await fechaCurInput.sendKeys('03/10/2025');
      console.log('‚úÖ Fecha CUR completada');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Fecha CUR no encontrado');
    }

    // 26. Registro Sanitario
    try {
      const registroSanitarioInput = await driver.findElement(By.xpath("//label[contains(text(), 'Registro Sanitario')]/following-sibling::input | //input[@name='registro_sanitario']"));
      await registroSanitarioInput.clear();
      await registroSanitarioInput.sendKeys(`RS-${UNIQUE_REF}`);
      console.log('‚úÖ Registro Sanitario completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Registro Sanitario no encontrado');
    }

    // 27. Distrito
    try {
      const distritoInput = await driver.findElement(By.xpath("//label[contains(text(), 'Distrito')]/following-sibling::input | //input[@name='distrito']"));
      await distritoInput.clear();
      await distritoInput.sendKeys('Distrito Central');
      console.log('‚úÖ Distrito completado');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Distrito no encontrado');
    }

    // 28. Observaciones
    try {
      const observacionesInput = await driver.findElement(By.xpath("//label[contains(text(), 'Observaciones')]/following-sibling::textarea | //textarea[@name='observaciones'] | //label[contains(text(), 'Observaciones')]/following-sibling::input"));
      await observacionesInput.clear();
      await observacionesInput.sendKeys('Expediente de prueba automatizada E2E - Completado exitosamente');
      console.log('‚úÖ Observaciones completadas');
    } catch (e) {
      console.log('‚ö†Ô∏è Campo Observaciones no encontrado');
    }

    // 29. Marcar como Finalizado
    try {
      const finalizadoCheckbox = await driver.findElement(By.xpath("//label[contains(text(), 'Finalizado')]/following-sibling::input[@type='checkbox'] | //input[@name='finalizado'] | //label[contains(text(), 'Finalizado')]/input"));
      if (!(await finalizadoCheckbox.isSelected())) {
        await finalizadoCheckbox.click();
        console.log('‚úÖ Expediente marcado como Finalizado');
      } else {
        console.log('‚úÖ Expediente ya estaba marcado como Finalizado');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Checkbox Finalizado no encontrado');
    }

    // Guardar el expediente
    console.log('üíæ Guardando expediente...');
    
    // Hacer scroll hacia abajo para asegurar que el bot√≥n est√© visible
    await driver.executeScript("window.scrollTo(0, document.body.scrollHeight);");
    await driver.sleep(1000);
    
    // Buscar el bot√≥n de guardar con m√∫ltiples estrategias
    let saveBtn = null;
    const strategies = [
      "//button[contains(text(), 'Guardar')]",
      "//button[contains(text(), 'Registrar')]", 
      "//button[contains(text(), 'Crear')]",
      "//button[contains(@class, 'btn-primary')]",
      "//input[@type='submit']",
      "//button[@type='submit']"
    ];
    
    for (const strategy of strategies) {
      try {
        const buttons = await driver.findElements(By.xpath(strategy));
        if (buttons.length > 0) {
          saveBtn = buttons[0];
          console.log(`‚úÖ Bot√≥n encontrado con estrategia: ${strategy}`);
          break;
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è Estrategia fallida: ${strategy}`);
      }
    }
    
    if (!saveBtn) {
      console.log('‚ùå No se encontr√≥ bot√≥n de guardar');
      throw new Error('No se pudo encontrar el bot√≥n de guardar');
    }
    
    // Intentar hacer clic con diferentes m√©todos
    let clickSuccess = false;
    
    // M√©todo 1: Clic directo
    try {
      await saveBtn.click();
      clickSuccess = true;
      console.log('‚úÖ Clic directo exitoso');
    } catch (e) {
      console.log('‚ö†Ô∏è Clic directo fall√≥:', e.message);
    }
    
    // M√©todo 2: JavaScript click si el directo fall√≥
    if (!clickSuccess) {
      try {
        await driver.executeScript("arguments[0].click();", saveBtn);
        clickSuccess = true;
        console.log('‚úÖ Clic con JavaScript exitoso');
      } catch (e) {
        console.log('‚ö†Ô∏è Clic con JavaScript fall√≥:', e.message);
      }
    }
    
    // M√©todo 3: Mover al elemento y hacer clic
    if (!clickSuccess) {
      try {
        await driver.actions().move({origin: saveBtn}).click().perform();
        clickSuccess = true;
        console.log('‚úÖ Clic con actions exitoso');
      } catch (e) {
        console.log('‚ö†Ô∏è Clic con actions fall√≥:', e.message);
      }
    }
    
    if (!clickSuccess) {
      console.log('‚ùå Todos los m√©todos de clic fallaron');
      // Tomar screenshot para diagn√≥stico
      const screenshot = await driver.takeScreenshot();
      const fs = require('fs');
      const path = require('path');
      const screenshotPath = path.join(__dirname, `error-guardar-${Date.now()}.png`);
      fs.writeFileSync(screenshotPath, screenshot, 'base64');
      console.log(`üì∏ Screenshot de error guardado en: ${screenshotPath}`);
      throw new Error('No se pudo hacer clic en el bot√≥n de guardar');
    }

    // Esperar mensaje de confirmaci√≥n o cierre de modal
    console.log('‚è≥ Esperando confirmaci√≥n...');
    await driver.sleep(3000);

    // Verificar si hay mensaje de confirmaci√≥n
    try {
      const confirmMsg = await driver.findElements(By.xpath("//div[contains(text(), '√©xito') or contains(text(), 'guardado') or contains(text(), 'exitosamente')]"));
      if (confirmMsg.length > 0) {
        console.log('‚úÖ Mensaje de confirmaci√≥n detectado');
        
        // Cerrar mensaje si hay bot√≥n de cerrar
        try {
          const closeBtn = await driver.findElement(By.xpath("//button[contains(text(), 'Cerrar') or contains(text(), 'OK') or contains(text(), 'Aceptar')]"));
          await closeBtn.click();
          console.log('‚úÖ Mensaje de confirmaci√≥n cerrado');
        } catch (e) {
          console.log('‚ö†Ô∏è No se encontr√≥ bot√≥n para cerrar mensaje');
        }
      }
    } catch (e) {
      console.log('‚ö†Ô∏è No se detect√≥ mensaje de confirmaci√≥n');
    }

    // Verificar si el modal sigue abierto y cerrarlo
    try {
      const modalOpen = await driver.findElements(By.css('.modal-dialog, .modal'));
      if (modalOpen.length > 0) {
        console.log('üîÑ Modal a√∫n abierto, intentando cerrar...');
        const closeModalBtn = await driver.findElement(By.xpath("//button[contains(@class, 'close') or contains(@class, 'btn-close') or contains(text(), '√ó') or contains(@aria-label, 'Close')]"));
        await closeModalBtn.click();
        await driver.sleep(1000);
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Error al intentar cerrar el modal:', e.message);
    }

    // Verificar que el expediente aparece en la tabla
    console.log(`üîç Verificando que el expediente ${UNIQUE_REF} aparece en la tabla...`);
    let attempts = 0;
    const maxAttempts = 10;
    let foundRow = null;
    
    while (!foundRow && attempts < maxAttempts) {
      attempts++;
      console.log(`Intento ${attempts}/${maxAttempts}...`);
      
      // Refrescar la p√°gina si despu√©s de varios intentos
      if (attempts > 5) {
        console.log('üîÑ Refrescando p√°gina...');
        await driver.navigate().refresh();
        await driver.sleep(2000);
      }
      
      foundRow = await findRowByText(UNIQUE_REF);
      if (!foundRow) {
        await driver.sleep(1000);
      }
    }
    
    if (foundRow) {
      console.log('‚úÖ Expediente creado exitosamente y visible en la tabla');
    } else {
      console.log('‚ö†Ô∏è No se pudo verificar el expediente en la tabla');
    }
    
    // Tomar screenshot como evidencia
    try {
      const screenshot = await driver.takeScreenshot();
      const fs = require('fs');
      const path = require('path');
      const screenshotPath = path.join(__dirname, `expediente-creado-${UNIQUE_REF}.png`);
      fs.writeFileSync(screenshotPath, screenshot, 'base64');
      console.log(`üì∏ Screenshot guardado en: ${screenshotPath}`);
    } catch (e) {
      console.log('‚ö†Ô∏è No se pudo guardar screenshot:', e.message);
    }
    
    // Verificaci√≥n final
    expect(foundRow).to.not.be.null;
  });
});
